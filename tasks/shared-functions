#!/bin/bash -eux

function branch_exists() {
  local repo
  repo="${1}"

  local branch_name
  branch_name="${2}"

  pushd "${repo}" > /dev/null
    if [[ -n "$(git branch -r --list "origin/${branch_name}")" ]]; then
      return 0
    else
      return 1
    fi
  popd > /dev/null
}

function commit_with_message() {
  local repo_dir="${1}"
  local commit_message_file="${2}"

  pushd "${repo_dir}" > /dev/null
    if [[ -z "$(git status --porcelain)" ]]; then
      popd > /dev/null
      return
    fi

    git config user.name "CF RELINT BOT"
    git config user.email "cf-release-integration@pivotal.io"

    git add .

    local commit_message
    commit_message="$(cat "${commit_message_file}")"

    if [[ -z "${commit_message}" ]]; then
      commit_message="No changes"
    fi

    git commit -m "${commit_message}"

    git status
    git show --color | cat
  popd > /dev/null
}

function branch_name() {
  echo "update-$1-release-$2"
}

function load_github_deploy_key() {
  local DEPLOY_KEY=$1

  set +x
  local deploy_key_location
  deploy_key_location="$(mktemp)"

  echo "${DEPLOY_KEY}" > "${deploy_key_location}"
  chmod 0600 "${deploy_key_location}"
  eval "$(ssh-agent -s)"
  ssh-add "${deploy_key_location}"
  rm "${deploy_key_location}"

  mkdir -p "${HOME}/.ssh"
  ssh-keyscan github.com,192.30.255.113 github.com,192.30.255.112 >> "${HOME}/.ssh/known_hosts"
  set -x
}

function load_from_json_config() {
  set +ux

  if [ -z "${BBL_JSON_CONFIG}" ]; then
    set -ux
    return
  fi

  keys=$( jq -r 'keys[]' "${BBL_JSON_CONFIG}" )
  for key in $keys; do
    if [[ -v $key ]]; then
      echo "Getting $key from BBL_JSON_CONFIG"
      export $key=$( jq -r ".$key" "${BBL_JSON_CONFIG}" )
    fi
  done
  set -ux
}

function emit_metric() {
  # expected environment variables:
  #   METRIC_SOURCE_NAME, WAVEFRONT_API_KEY, WAVEFRONT_API_ENDPOINT
  METRIC_NAME=$1
  METRIC_VALUE=$2
  METRIC_TAGS=$3

  wavefront_metrics_file="./wavefront_metrics"

  echo "Emitting metric name: ${METRIC_NAME} value: ${METRIC_VALUE} source: ${METRIC_SOURCE_NAME} tags: ${METRIC_TAGS}"

  echo "${METRIC_NAME} ${METRIC_VALUE} source=${METRIC_SOURCE_NAME} ${METRIC_TAGS}" > "${wavefront_metrics_file}"

  curl --fail --retry 5 -H "Authorization: Bearer ${WAVEFRONT_API_KEY}" -F file=@"${wavefront_metrics_file}" ${WAVEFRONT_API_ENDPOINT}
}


function push_uptimer_metrics_to_wavefront() {
  export METRIC_SOURCE_NAME=$1
  export UPTIMER_RESULT_FILE_PATH=$2

  : "${METRIC_TAGS:=""}"

  if [[ -f "${UPTIMER_RESULT_FILE_PATH}" ]]; then
    exit_code=$(cat ${UPTIMER_RESULT_FILE_PATH} | jq -r '.commandExitCode')
    metric_prefix="wavefront-test-2.uptimer"

    if [[ "${exit_code}" == "0" ]]; then
      for row in $(cat ${UPTIMER_RESULT_FILE_PATH} | jq -r '.summaries[] | @base64'); do
          _jq() {
          echo ${row} | base64 -d | jq -r ${1}
          }

          name="$(_jq '.name' | tr -s " " "-")"

          num_failed=$(_jq '.failed')
          num_attempts=$(_jq '.total')
          num_passed=$(( num_attempts - num_failed ))

          emit_metric "${metric_prefix}.${name}.failed" "${num_failed}" "$METRIC_TAGS"
          emit_metric "${metric_prefix}.${name}.attempts" "${num_attempts}" "$METRIC_TAGS"
          emit_metric "${metric_prefix}.${name}.passed" "${num_passed}" "$METRIC_TAGS"
      done

      emit_metric "${metric_prefix}.upgrade.success" "1" "$METRIC_TAGS"
    else
      emit_metric "${metric_prefix}.upgrade.success" "0" "$METRIC_TAGS"
    fi
  fi
}
