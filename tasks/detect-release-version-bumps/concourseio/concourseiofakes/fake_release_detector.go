// Code generated by counterfeiter. DO NOT EDIT.
package concourseiofakes

import (
	sync "sync"
)

type FakeReleaseDetector struct {
	DetectUpdatedReleasesStub        func()
	detectUpdatedReleasesMutex       sync.RWMutex
	detectUpdatedReleasesArgsForCall []struct {
	}
	LoadStub        func(string, string) error
	loadMutex       sync.RWMutex
	loadArgsForCall []struct {
		arg1 string
		arg2 string
	}
	loadReturns struct {
		result1 error
	}
	loadReturnsOnCall map[int]struct {
		result1 error
	}
	WriteStub        func() ([]byte, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
	}
	writeReturns struct {
		result1 []byte
		result2 error
	}
	writeReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReleaseDetector) DetectUpdatedReleases() {
	fake.detectUpdatedReleasesMutex.Lock()
	fake.detectUpdatedReleasesArgsForCall = append(fake.detectUpdatedReleasesArgsForCall, struct {
	}{})
	fake.recordInvocation("DetectUpdatedReleases", []interface{}{})
	fake.detectUpdatedReleasesMutex.Unlock()
	if fake.DetectUpdatedReleasesStub != nil {
		fake.DetectUpdatedReleasesStub()
	}
}

func (fake *FakeReleaseDetector) DetectUpdatedReleasesCallCount() int {
	fake.detectUpdatedReleasesMutex.RLock()
	defer fake.detectUpdatedReleasesMutex.RUnlock()
	return len(fake.detectUpdatedReleasesArgsForCall)
}

func (fake *FakeReleaseDetector) DetectUpdatedReleasesCalls(stub func()) {
	fake.detectUpdatedReleasesMutex.Lock()
	defer fake.detectUpdatedReleasesMutex.Unlock()
	fake.DetectUpdatedReleasesStub = stub
}

func (fake *FakeReleaseDetector) Load(arg1 string, arg2 string) error {
	fake.loadMutex.Lock()
	ret, specificReturn := fake.loadReturnsOnCall[len(fake.loadArgsForCall)]
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Load", []interface{}{arg1, arg2})
	fake.loadMutex.Unlock()
	if fake.LoadStub != nil {
		return fake.LoadStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.loadReturns
	return fakeReturns.result1
}

func (fake *FakeReleaseDetector) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

func (fake *FakeReleaseDetector) LoadCalls(stub func(string, string) error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = stub
}

func (fake *FakeReleaseDetector) LoadArgsForCall(i int) (string, string) {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	argsForCall := fake.loadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReleaseDetector) LoadReturns(result1 error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = nil
	fake.loadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReleaseDetector) LoadReturnsOnCall(i int, result1 error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = nil
	if fake.loadReturnsOnCall == nil {
		fake.loadReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loadReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeReleaseDetector) Write() ([]byte, error) {
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
	}{})
	fake.recordInvocation("Write", []interface{}{})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.writeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReleaseDetector) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeReleaseDetector) WriteCalls(stub func() ([]byte, error)) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeReleaseDetector) WriteReturns(result1 []byte, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseDetector) WriteReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseDetector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.detectUpdatedReleasesMutex.RLock()
	defer fake.detectUpdatedReleasesMutex.RUnlock()
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReleaseDetector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
