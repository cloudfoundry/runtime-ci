// Code generated by counterfeiter. DO NOT EDIT.
package trackerfakes

import (
	"net/http"
	"sync"

	"github.com/cloudfoundry/runtime-ci/tasks/create-cats-flake-story/tracker"
	"gopkg.in/salsita/go-pivotaltracker.v2/v5/pivotal"
)

type FakeAPI struct {
	CreateStub        func(int, *pivotal.StoryRequest) (*pivotal.Story, *http.Response, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 int
		arg2 *pivotal.StoryRequest
	}
	createReturns struct {
		result1 *pivotal.Story
		result2 *http.Response
		result3 error
	}
	createReturnsOnCall map[int]struct {
		result1 *pivotal.Story
		result2 *http.Response
		result3 error
	}
	ListStub        func(int, string) ([]*pivotal.Story, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 int
		arg2 string
	}
	listReturns struct {
		result1 []*pivotal.Story
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []*pivotal.Story
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) Create(arg1 int, arg2 *pivotal.StoryRequest) (*pivotal.Story, *http.Response, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 int
		arg2 *pivotal.StoryRequest
	}{arg1, arg2})
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.createReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAPI) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeAPI) CreateCalls(stub func(int, *pivotal.StoryRequest) (*pivotal.Story, *http.Response, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeAPI) CreateArgsForCall(i int) (int, *pivotal.StoryRequest) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) CreateReturns(result1 *pivotal.Story, result2 *http.Response, result3 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *pivotal.Story
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) CreateReturnsOnCall(i int, result1 *pivotal.Story, result2 *http.Response, result3 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *pivotal.Story
			result2 *http.Response
			result3 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *pivotal.Story
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAPI) List(arg1 int, arg2 string) ([]*pivotal.Story, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("List", []interface{}{arg1, arg2})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeAPI) ListCalls(stub func(int, string) ([]*pivotal.Story, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeAPI) ListArgsForCall(i int) (int, string) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) ListReturns(result1 []*pivotal.Story, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*pivotal.Story
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListReturnsOnCall(i int, result1 []*pivotal.Story, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []*pivotal.Story
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []*pivotal.Story
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tracker.API = new(FakeAPI)
