// Code generated by counterfeiter. DO NOT EDIT.
package trackerfakes

import (
	"sync"

	"github.com/cloudfoundry/runtime-ci/tasks/create-cats-flake-story/tracker"
	"gopkg.in/salsita/go-pivotaltracker.v2/v5/pivotal"
)

type FakeTrackerAPI struct {
	ListStub        func(int, string) ([]*pivotal.Story, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 int
		arg2 string
	}
	listReturns struct {
		result1 []*pivotal.Story
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []*pivotal.Story
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTrackerAPI) List(arg1 int, arg2 string) ([]*pivotal.Story, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("List", []interface{}{arg1, arg2})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTrackerAPI) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeTrackerAPI) ListCalls(stub func(int, string) ([]*pivotal.Story, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeTrackerAPI) ListArgsForCall(i int) (int, string) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTrackerAPI) ListReturns(result1 []*pivotal.Story, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*pivotal.Story
		result2 error
	}{result1, result2}
}

func (fake *FakeTrackerAPI) ListReturnsOnCall(i int, result1 []*pivotal.Story, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []*pivotal.Story
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []*pivotal.Story
		result2 error
	}{result1, result2}
}

func (fake *FakeTrackerAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTrackerAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tracker.TrackerAPI = new(FakeTrackerAPI)
